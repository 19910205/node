node.parts.nodespace
=======================

    >>> from plumber import plumber
    >>> from node.base import OrderedNode
    >>> from node.parts.nodespace import Nodespaces
    
    >>> class NodespacesNode(OrderedNode):
    ...     __metaclass__ = plumber
    ...     __plumbing__ = Nodespaces,
    
    >>> node = NodespacesNode()
    >>> node.nodespaces
    odict([('__children__', <NodespacesNode object 'None' at ...>)])
    
    >>> node['__children__']['child'] = OrderedNode()
    >>> node['child']
    <OrderedNode object 'child' at ...>
    
    >>> node['__children__']['child'] is node['child']
    True
    
    >>> node['__foo__'] = OrderedNode()
    >>> node['__foo__']
    <OrderedNode object '__foo__' at ...>
    
    >>> node['__foo__']['child'] = OrderedNode()
    >>> node['__foo__']['child']
    <OrderedNode object 'child' at ...>
    
    >>> node['__foo__']['child'] is node['child']
    False
    
    >>> node.nodespaces
    odict([('__children__', <NodespacesNode object 'None' at ...>), 
    ('__foo__', <OrderedNode object '__foo__' at ...>)])
    
    >>> node['__inexistent__']
    Traceback (most recent call last):
      ...
    KeyError: '__inexistent__'
    
    >>> node['inexistent']
    Traceback (most recent call last):
      ...
    KeyError: 'inexistent'
    
    >>> del node['child']
    >>> node.keys()
    []
    
    >>> node['__foo__'].keys()
    ['child']
    
    >>> del node['__foo__']
    >>> node.nodespaces
    odict([('__children__', <NodespacesNode object 'None' at ...>)])
