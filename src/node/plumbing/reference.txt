Tree node index.
::

    >>> root.index
    <node.bbb.NodeIndex object at ...>

    >>> from zope.interface.common.mapping import IReadMapping
    >>> IReadMapping.providedBy(root.index)
    True

    >>> root.index[root.uuid]
    <Node object 'root' at ...>

    >>> root.index.get(root.uuid)
    <Node object 'root' at ...>

    >>> root.uuid in root.index
    True

    >>> len(root.index._index)
    1

Add some children and check node containment stuff.
::
    >>> root['child'] = Node()
    >>> root['child'].path
    ['root', 'child']

    >>> root.index._index is root['child'].index._index
    True

    >>> len(root.index._index)
    2

    >>> root['child']['subchild'] = Node()
    >>> len(root.index._index)
    3

    >>> root['child']['subchild2'] = Node()
    >>> len(root.index._index)
    4

    >>> root.printtree()
    <class 'node.bbb.Node'>: root
      <class 'node.bbb.Node'>: child
        <class 'node.bbb.Node'>: subchild
        <class 'node.bbb.Node'>: subchild2

Adding in indexed Node with same uuid or the same node twice fails.
::
    >>> child = root['child']
    >>> root['child2'] = child
    Traceback (most recent call last):
      ...
    ValueError: Node with uuid already exists

Check UUID stuff.
::
    >>> uuid = root['child']['subchild'].uuid
    >>> uuid
    UUID('...')

    >>> root.node(uuid).path
    ['root', 'child', 'subchild']

    >>> root.uuid = uuid
    Traceback (most recent call last):
      ...
    ValueError: Given uuid was already used for another Node

    >>> import uuid
    >>> newuuid = uuid.uuid4()

    >>> root.uuid = newuuid
    >>> root['child'].node(newuuid).path
    ['root']

    >>> len(root._index.keys())
    4

Store the uuids of the nodes which are expected to be deleted from index if
child is deleted.
::
    >>> delindexes = [
    ...     int(root['child'].uuid),
    ...     int(root['child']['subchild'].uuid),
    ...     int(root['child']['subchild2'].uuid),
    ... ]

Read the uuid index and check containment in index.
::
    >>> iuuids = root._index.keys()
    >>> len(iuuids)
    4

    >>> delindexes[0] in iuuids
    True

    >>> delindexes[1] in iuuids
    True

    >>> delindexes[2] in iuuids
    True

Delete child. All checked uuids above must be deleted from index.
::
    >>> del root['child']
    >>> root.keys()
    []

    >>> uuids = root._index.keys()
    >>> len(uuids)
    1

    >>> root.index[root.uuid] is root
    True

    >>> delindexes[0] in uuids
    False

    >>> delindexes[1] in uuids
    False

    >>> delindexes[2] in uuids
    False

    >>> root.printtree()
    <class 'node.bbb.Node'>: root
