node.behavior.orderable
=======================

::
    >>> from node.base import OrderedNode
    >>> from node.behavior import behavior
    >>> from node.behavior import Orderable
    
    >>> @behavior(Orderable)
    ... class OrderableNode(OrderedNode): pass

    >>> node = OrderableNode('orderable')
    
Node insertion. There exist an ``insertbefore`` and ``insertafter`` function.
::
    >>> node['child1'] = OrderableNode()
    >>> node['child2'] = OrderableNode()
    >>> node.printtree()
    <class 'OrderableNode'>: orderable
      <class 'OrderableNode'>: child1
      <class 'OrderableNode'>: child2

    >>> new = OrderableNode()
    >>> node.insertbefore(new, node['child1'])
    Traceback (most recent call last):
      ...
    ValueError: Given node has no __name__ set.

    >>> #node.insertbefore(node['child2'], node['child1'])
    Traceback (most recent call last):
      ...
    KeyError: u'Given node already contained in tree.'

    >>> new.__name__ = 'child3'
    >>> node.insertbefore(new, node['child2'])
    >>> node.printtree()
    <class 'OrderableNode'>: orderable
      <class 'OrderableNode'>: child1
      <class 'OrderableNode'>: child3
      <class 'OrderableNode'>: child2

    >>> new = OrderableNode('child4')
    >>> node.insertafter(new, node['child3'])
    >>> node.printtree()
    <class 'OrderableNode'>: orderable
      <class 'OrderableNode'>: child1
      <class 'OrderableNode'>: child3
      <class 'OrderableNode'>: child4
      <class 'OrderableNode'>: child2

    >>> new = OrderableNode('child5')
    >>> node.insertafter(new, node['child2'])
    >>> node.printtree()
    <class 'OrderableNode'>: orderable
      <class 'OrderableNode'>: child1
      <class 'OrderableNode'>: child3
      <class 'OrderableNode'>: child4
      <class 'OrderableNode'>: child2
      <class 'OrderableNode'>: child5

Move a node. Therefor we first need to detach the node we want to move from
tree. Then insert the detached node elsewhere. In general, you can insert the
detached node or subtree to a complete different tree.
::
    >>> #len(node._raw_node_index().keys())
    6

    >>> detached = node.detach('child4')
    >>> detached
    <OrderableNode object 'child4' at ...>

    >>> #len(detached._index.keys())
    #1
    >>> #len(node._index.keys())
    #5

    >>> len(node.values())
    4
    
    >>> node.printtree()
    <class 'OrderableNode'>: orderable
      <class 'OrderableNode'>: child1
      <class 'OrderableNode'>: child3
      <class 'OrderableNode'>: child2
      <class 'OrderableNode'>: child5

    >>> detached.__name__
    'child4'
    
    >>> node['child1']
    <OrderableNode object 'child1' at ...>
    
    >>> node.insertbefore(detached, node['child1'])
    
    >>> node.keys()
    ['child4', 'child1', 'child3', 'child2', 'child5']
    
    >>> node.printtree()
    <class 'OrderableNode'>: orderable
      <class 'OrderableNode'>: child4
      <class 'OrderableNode'>: child1
      <class 'OrderableNode'>: child3
      <class 'OrderableNode'>: child2
      <class 'OrderableNode'>: child5

Merge 2 Node Trees.

XXX: this goes to referencable (before and after handler for orderable)
::
    >>> tree1 = OrderableNode()
    >>> tree1['a'] = OrderableNode()
    >>> tree1['b'] = OrderableNode()
    >>> tree2 = OrderableNode()
    >>> tree2['d'] = OrderableNode()
    >>> tree2['e'] = OrderableNode()
    
    >>> #tree1._index is tree2._index
    False

    >>> #len(tree1._index.keys())
    3

    >>> tree1.printtree()
    <class 'OrderableNode'>: None
      <class 'OrderableNode'>: a
      <class 'OrderableNode'>: b

    >>> #len(tree2._index.keys())
    3

    >>> tree2.printtree()
    <class 'OrderableNode'>: None
      <class 'OrderableNode'>: d
      <class 'OrderableNode'>: e

    >>> tree1['c'] = tree2
    >>> #len(tree1._index.keys())
    6

    >>> #tree1._index is tree2._index
    True

    >>> tree1.printtree()
    <class 'OrderableNode'>: None
      <class 'OrderableNode'>: a
      <class 'OrderableNode'>: b
      <class 'OrderableNode'>: c
        <class 'OrderableNode'>: d
        <class 'OrderableNode'>: e

Detach subtree and insert elsewhere.
::
    >>> sub = tree1.detach('c')
    >>> sub.printtree()
    <class 'OrderableNode'>: c
      <class 'OrderableNode'>: d
      <class 'OrderableNode'>: e

    >>> #tree1._index is sub._index
    False

    >>> #sub._index is sub['d']._index is sub['e']._index
    True

    >>> #len(sub._index.keys())
    3

    >>> tree1.printtree()
     <class 'OrderableNode'>: None
      <class 'OrderableNode'>: a
      <class 'OrderableNode'>: b

    >>> #len(tree1._index.keys())
    3

    >>> sub.__name__ = 'x'
    >>> tree1.insertbefore(sub, tree1['a'])
    >>> tree1.printtree()
    <class 'OrderableNode'>: None
      <class 'OrderableNode'>: x
        <class 'OrderableNode'>: d
        <class 'OrderableNode'>: e
      <class 'OrderableNode'>: a
      <class 'OrderableNode'>: b

    >>> #tree1._index is sub._index
    True

    >>> #len(tree1._index.keys())
    6

    >>> #tree1.insertbefore(sub, tree1['a'])
    Traceback (most recent call last):
      ...
    KeyError: u'Given node already contained in tree.'