node.parts.lifecycle
=======================

Check NodeCreation::

    >>> import zope.component
    >>> from node.interfaces import INode
    >>> from node.interfaces import INodeCreatedEvent
    >>> from node.interfaces import INodeAddedEvent
    >>> from node.interfaces import INodeModifiedEvent
    >>> from node.interfaces import INodeRemovedEvent
    >>> from node.interfaces import INodeDetachedEvent
    
    >>> class Handler(object):
    ...     handled = []
    ...     def __call__(self, obj, event):
    ...         self.handled.append(event)
    >>> handler = Handler()
    
    >>> zope.component.provideHandler(handler, [INode, INodeCreatedEvent])
    >>> zope.component.provideHandler(handler, [INode, INodeAddedEvent])
    >>> zope.component.provideHandler(handler, [INode, INodeModifiedEvent])
    >>> zope.component.provideHandler(handler, [INode, INodeRemovedEvent])
    >>> zope.component.provideHandler(handler, [INode, INodeDetachedEvent])
    
    >>> from node.parts.lifecycle import Lifecycle, AttributesLifecycle
    >>> from node.parts.attributes import Attributes, NodeAttributes
    >>> from node.parts.nodespace import Nodespaces
    >>> from node.parts.nodify import Nodify
    
    >>> root = OrderedNode('no_notify')
    >>> handler.handled
    []
    
    >>> from plumber import plumber
    
    >>> class LifecycleNodeAttributes(NodeAttributes):
    ...     __metaclass__ = plumber
    ...     __plumbing__ = AttributesLifecycle
    
    >>> class LifecycleNode(dict):
    ...     __metaclass__ = plumber
    ...     __plumbing__ = Nodespaces, Attributes, Lifecycle, Nodify
    ...     attributes_factory = LifecycleNodeAttributes

    >>> root = LifecycleNode('root')
    >>> handler.handled
    [<node.events.NodeCreatedEvent object at ...>]

Check Node adding.
::
    
    >>> del handler.handled[0]
    >>> child1 = LifecycleNode()
    >>> root['child1'] = child1
    >>> handler.handled
    [<node.events.NodeCreatedEvent object at ...>, 
    <node.events.NodeAddedEvent object at ...>]

Check Node modification.
::

    >>> del handler.handled[0]
    >>> del handler.handled[0]

    >>> ignore = child1.attrs
    
No event, despite the node creation for the attributes nodespace

    >>> handler.handled
    []
    
Node modified events if the attributes nodespace is changed

    >>> child1.attrs['foo'] = 1
    >>> handler.handled
    [<node.events.NodeModifiedEvent object at ...>]
    
    >>> del handler.handled[0]
    >>> del child1.attrs['foo']  
    >>> handler.handled
    [<node.events.NodeModifiedEvent object at ...>]

Check Node Deletion.
:: 

    >>> handler.handled = []
    >>> del root['child1']
    >>> handler.handled
    [<node.events.NodeRemovedEvent object at ...>]

Check Node Detach.
:: 

    >>> child2 = LifecycleNode()
    >>> root['child2'] = child2
    >>> handler.handled = []
    >>> detached = root.detach('child2')    
    >>> handler.handled
    [<node.events.NodeDetachedEvent object at ...>]
