node.base
=========

Helper function for creating identically trees from different classes.
::

    >>> def create_tree(class_):
    ...     root = class_()
    ...     for i in range(3):
    ...         root['child-%i' % i] = class_()
    ...         for j in range(2):
    ...             root['child-%i' % i]['subchild-%j'] = class_()
    ...     return root


``IFullMapping`` in short:
::
    
    - derived from ``IItemMapping``
        - ``__getitem__``
    
    - derived from ``IReadMapping``
        - ``get``
        - ``__contains__``

    - derived from ``IWriteMapping``
        - ``__delitem__``
        - ``__setitem__``

    - derived from ``IEnumerableMapping``
        - ``keys``
        - ``__iter__``
        - ``values``
        - ``items``
        - ``__len__``
    
    - derived from ``IIterableMapping``
        - ``iterkeys``
        - ``itervalues``
        - ``iteritems``

    - derived from ``IClonableMapping``
        - ``copy``

    - derived from ``IExtendedReadMapping``
        - ``has_key``

    - derived from ``IExtendedWriteMapping``
        - ``clear``
        - ``update``
        - ``setdefault``
        - ``pop``
        - ``popitem``


AbstractNode
------------
::

    >>> from node.base import AbstractNode
    >>> AbstractNode
    <class 'node.base.AbstractNode'>
    
    >>> AbstractNode.__bases__
    (<class 'node.base._NodeMixin'>, <class 'node.base._FullMappingMixin'>)
    
    >>> abstract = AbstractNode()
    >>> abstract
    <AbstractNode object 'None' at ...>
    

BaseNode
--------
::

    >>> from node.base import BaseNode
    >>> BaseNode
    <class 'node.base.BaseNode'>
    
    >>> BaseNode.__bases__
    (<class 'node.base._NodeSpaceMixin'>, <type 'dict'>)
    
    >>> base = create_tree(BaseNode)
    >>> base
    <BaseNode object 'None' at ...>
    
    >>> #base.printtree()


OrderedNode
-----------
::

    >>> from node.base import OrderedNode
    >>> OrderedNode
    <class 'node.base.OrderedNode'>
    
    >>> OrderedNode.__bases__
    (<class 'node.base._NodeSpaceMixin'>, <class 'odict.pyodict.odict'>)
    
    >>> ordered = create_tree(OrderedNode)
    >>> ordered
    <OrderedNode object 'None' at ...>


Check ``ILocation`` interface.
::




::

Check ``INode`` interface.